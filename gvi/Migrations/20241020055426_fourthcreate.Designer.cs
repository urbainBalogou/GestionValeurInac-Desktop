// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using gvi.Data;

#nullable disable

namespace gvi.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20241020055426_fourthcreate")]
    partial class fourthcreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.35")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Entree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CommuneId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateEntree")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CommuneId");

                    b.ToTable("Entrees");
                });

            modelBuilder.Entity("EntreeValeur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EntreeId")
                        .HasColumnType("int");

                    b.Property<int>("MontantTotal")
                        .HasColumnType("int");

                    b.Property<int>("Quantite")
                        .HasColumnType("int");

                    b.Property<int>("ValeurId")
                        .HasColumnType("int");

                    b.Property<int>("ValeurInactiveId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EntreeId");

                    b.HasIndex("ValeurId");

                    b.ToTable("EntreeValeurs");
                });

            modelBuilder.Entity("gvi.Models.Commune", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodeCommune")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Communes");
                });

            modelBuilder.Entity("gvi.Models.Demande", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CommuneId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateDemande")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateRetrait")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EnCours")
                        .HasColumnType("bit");

                    b.Property<bool>("EstSortie")
                        .HasColumnType("bit");

                    b.Property<bool>("EstTraitee")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CommuneId");

                    b.ToTable("Demandes");
                });

            modelBuilder.Entity("gvi.Models.DemandeValeur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DemandeId")
                        .HasColumnType("int");

                    b.Property<int>("MontantTotal")
                        .HasColumnType("int");

                    b.Property<int>("Quantite")
                        .HasColumnType("int");

                    b.Property<int>("ValeurId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DemandeId");

                    b.HasIndex("ValeurId");

                    b.ToTable("DemandeValeurs");
                });

            modelBuilder.Entity("gvi.Models.Employe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CommuneId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FonctionId")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CommuneId");

                    b.HasIndex("FonctionId");

                    b.ToTable("Employes");
                });

            modelBuilder.Entity("gvi.Models.Fonction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CodeFonction")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Fonctions");
                });

            modelBuilder.Entity("gvi.Models.Sortie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CommuneId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateSortie")
                        .HasColumnType("datetime2");

                    b.Property<int>("DemandeId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommuneId");

                    b.HasIndex("DemandeId");

                    b.HasIndex("EmployeId");

                    b.ToTable("Sorties");
                });

            modelBuilder.Entity("gvi.Models.SortieValeur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("MontantTotal")
                        .HasColumnType("int");

                    b.Property<int>("Quantite")
                        .HasColumnType("int");

                    b.Property<int>("SortieId")
                        .HasColumnType("int");

                    b.Property<int>("ValeurId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SortieId");

                    b.HasIndex("ValeurId");

                    b.ToTable("SortieValeurs");
                });

            modelBuilder.Entity("gvi.Models.Stockage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CommuneId")
                        .HasColumnType("int");

                    b.Property<int>("QuantiteDisponible")
                        .HasColumnType("int");

                    b.Property<int>("ValeurId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ValeurId");

                    b.HasIndex("CommuneId", "ValeurId")
                        .IsUnique();

                    b.ToTable("Stockage");
                });

            modelBuilder.Entity("gvi.Models.TypeValeur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Nature")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("ValeurFaciale")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TypeValeurs");
                });

            modelBuilder.Entity("gvi.Models.Valeur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("montant")
                        .HasColumnType("float");

                    b.Property<int>("nombre_de_feuillets")
                        .HasColumnType("int");

                    b.Property<int>("nombre_de_valeur_par_feuillet_ou_carnet")
                        .HasColumnType("int");

                    b.Property<int>("typeValeurId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("typeValeurId");

                    b.ToTable("Valeurs");
                });

            modelBuilder.Entity("Utilisateur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Utilisateurs");
                });

            modelBuilder.Entity("Entree", b =>
                {
                    b.HasOne("gvi.Models.Commune", "Commune")
                        .WithMany()
                        .HasForeignKey("CommuneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Commune");
                });

            modelBuilder.Entity("EntreeValeur", b =>
                {
                    b.HasOne("Entree", "Entree")
                        .WithMany("Valeurs")
                        .HasForeignKey("EntreeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("gvi.Models.Valeur", "Valeur")
                        .WithMany()
                        .HasForeignKey("ValeurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entree");

                    b.Navigation("Valeur");
                });

            modelBuilder.Entity("gvi.Models.Demande", b =>
                {
                    b.HasOne("gvi.Models.Commune", "Commune")
                        .WithMany()
                        .HasForeignKey("CommuneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Commune");
                });

            modelBuilder.Entity("gvi.Models.DemandeValeur", b =>
                {
                    b.HasOne("gvi.Models.Demande", "Demande")
                        .WithMany("Valeurs")
                        .HasForeignKey("DemandeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("gvi.Models.Valeur", "Valeur")
                        .WithMany()
                        .HasForeignKey("ValeurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Demande");

                    b.Navigation("Valeur");
                });

            modelBuilder.Entity("gvi.Models.Employe", b =>
                {
                    b.HasOne("gvi.Models.Commune", "Commune")
                        .WithMany("Employes")
                        .HasForeignKey("CommuneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("gvi.Models.Fonction", "Fonction")
                        .WithMany("Employes")
                        .HasForeignKey("FonctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Commune");

                    b.Navigation("Fonction");
                });

            modelBuilder.Entity("gvi.Models.Sortie", b =>
                {
                    b.HasOne("gvi.Models.Commune", "Commune")
                        .WithMany()
                        .HasForeignKey("CommuneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("gvi.Models.Demande", "Demande")
                        .WithMany()
                        .HasForeignKey("DemandeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("gvi.Models.Employe", "Employe")
                        .WithMany()
                        .HasForeignKey("EmployeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Commune");

                    b.Navigation("Demande");

                    b.Navigation("Employe");
                });

            modelBuilder.Entity("gvi.Models.SortieValeur", b =>
                {
                    b.HasOne("gvi.Models.Sortie", "Sortie")
                        .WithMany()
                        .HasForeignKey("SortieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("gvi.Models.Valeur", "Valeur")
                        .WithMany()
                        .HasForeignKey("ValeurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sortie");

                    b.Navigation("Valeur");
                });

            modelBuilder.Entity("gvi.Models.Stockage", b =>
                {
                    b.HasOne("gvi.Models.Commune", "Commune")
                        .WithMany()
                        .HasForeignKey("CommuneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("gvi.Models.Valeur", "Valeur")
                        .WithMany()
                        .HasForeignKey("ValeurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Commune");

                    b.Navigation("Valeur");
                });

            modelBuilder.Entity("gvi.Models.Valeur", b =>
                {
                    b.HasOne("gvi.Models.TypeValeur", "TypeValeur")
                        .WithMany("Valeurs")
                        .HasForeignKey("typeValeurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeValeur");
                });

            modelBuilder.Entity("Entree", b =>
                {
                    b.Navigation("Valeurs");
                });

            modelBuilder.Entity("gvi.Models.Commune", b =>
                {
                    b.Navigation("Employes");
                });

            modelBuilder.Entity("gvi.Models.Demande", b =>
                {
                    b.Navigation("Valeurs");
                });

            modelBuilder.Entity("gvi.Models.Fonction", b =>
                {
                    b.Navigation("Employes");
                });

            modelBuilder.Entity("gvi.Models.TypeValeur", b =>
                {
                    b.Navigation("Valeurs");
                });
#pragma warning restore 612, 618
        }
    }
}
